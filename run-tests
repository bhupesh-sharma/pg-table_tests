#!/bin/bash
EXIT_STATUS=0
EXPECT_5LVL=0

MAX_USER_VM_4LVL_GiB=$(( 131072 ))

#
# Detect configuration
#
SUPPORT_NO5LVL=0
SUPPORT_LA57=0
SUPPORT_CONFIG_5LVL=0

if grep -q la57 /proc/cpuinfo 2>/dev/null; then
	echo "Detected la57 cpu support"
	SUPPORT_LA57=1
fi


if grep -q no5lvl /proc/cmdline 2>/dev/null; then
	echo "Detected no5lvl kernel parameter"
	SUPPORT_NO5LVL=1
fi


if grep -q CONFIG_X86_5LEVEL=y /boot/config-"$(uname -r)" 2>/dev/null  ; then
	echo "Detected 5lvl config"
	SUPPORT_CONFIG_5LVL=1
fi

if [[ $SUPPORT_LA57 -eq 1 &&  $SUPPORT_NO5LVL -eq 0 && $SUPPORT_CONFIG_5LVL -eq 1 ]] ; then
	EXPECT_5LVL=1
fi

if [[ $EXPECT_5LVL -eq 1 ]] ; then
	echo "Expecting 5-level pagetables"
else
	echo "Expecting 4-level pagetables"
fi


#
# setup test programs
#

# If stdin is open on a terminal, set color mode
[[ -t 1 ]] && COLOR="${COLOR:=1}"

if [[ $COLOR -eq 1 ]] ; then
        MSG_FAILED="\033[0;31mFAILED\033[0m"
        MSG_PASSED="\033[0;32mPASSED\033[0m"
else
        MSG_FAILED="FAILED"
        MSG_PASSED="PASSED"
fi

#
# heap test - malloc
#
echo
echo "Running heap - malloc test... "
regex="^([0-9]+) GiB allocated."
if ! output=$(./heap --malloc) ; then
	echo "$? FAILED"
	EXIT_STATUS=1
elif [[ $output =~ $regex ]] ; then
	alloc="${BASH_REMATCH[1]}"
	if [[ $alloc -gt $MAX_USER_VM_4LVL_GiB ]] ; then
		echo "$alloc GiB allocated > $MAX_USER_VM_4LVL_GiB GiB max 4-lvl user VM max"
		echo -e "$MSG_FAILED"
		EXIT_STATUS=1
	else
		echo "$alloc GiB allocated <= $MAX_USER_VM_4LVL_GiB GiB max 4-lvl user VM max"
		echo -e "$MSG_PASSED"
	fi
fi


#
# heap test - sbrk
#
echo
echo "Running heap - sbrk test... "
regex="^([0-9]+) GiB allocated."
if ! output=$(./heap --sbrk) ; then
	echo "$? FAILED"
	EXIT_STATUS=1
elif [[ $output =~ $regex ]] ; then
	alloc="${BASH_REMATCH[1]}"
	if [[ $alloc -gt $MAX_USER_VM_4LVL_GiB ]] ; then
		echo "$alloc GiB allocated > $MAX_USER_VM_4LVL_GiB GiB max 4-lvl user VM max"
		echo -e "$MSG_FAILED"
		EXIT_STATUS=1
	else
		echo "$alloc GiB allocated <= $MAX_USER_VM_4LVL_GiB GiB max 4-lvl user VM max"
		echo -e "$MSG_PASSED"
	fi
fi
#
# setting up the mmap tests
#
if [[ $EXPECT_5LVL -eq 1 ]] ; then
	BEGIN="47"
	END="55"
else
	BEGIN="37"
	END="46"
fi

#
# mmap+memset+fork test - 1 process, MAP_PRIVATE
#
echo
echo "Running mmap+memset+fork test: 1 process, MAP_PRIVATE..."
output="$(./mmap+memset+fork --begin "$BEGIN" --end "$END" --map_private --map_anonymous)"

fail=$?
regex="read\(.*\) != write_pattern\(.*\)"

while IFS= read -r ; do
	if [[ $output =~ $regex ]] ; then
		fail=1
		break;
	fi
done <<< "$output"

if [[ $fail -eq 1 ]] ; then
	echo -e "$MSG_FAILED"
	EXIT_STATUS=1

else
	echo -e "$MSG_PASSED"
fi

#
# mmap+memset+fork test - 2 processes, MAP_PRIVATE
#
echo
echo "Running mmap+memset+fork test: 2 processes, MAP_PRIVATE..."
output="$(./mmap+memset+fork --begin "$BEGIN" --end "$END" --fork_child --map_private --map_anonymous)"

fail=$?
regex="read\(.*\) != write_pattern\(.*\)"

while IFS= read -r ; do
	if [[ $output =~ $regex ]] ; then
		fail=1
		break;
	fi
done <<< "$output"

if [[ $fail -eq 1 ]] ; then
	echo -e "$MSG_FAILED"
	EXIT_STATUS=1
else
	echo -e "$MSG_PASSED"
fi

#
# setting max_shmat
#
if [[ $EXPECT_5LVL -eq 1 ]] ; then
	MAX_SHMAT="56"
else
	MAX_SHMAT="46"
fi


#
# shmat test
#
echo
echo "Running shmat test..."
regex="Allocates memory till ([0-9]+)"
if ! output=$(./shmat --begin $BEGIN --end $END) ; then
	echo "$? FAILED"
	EXIT_STATUS=1
elif [[ $output =~ $regex ]] ; then
	alloc="${BASH_REMATCH[1]}"
	if [[ $alloc -gt $MAX_SHMAT ]] ; then
		echo "attached memory at 2^$alloc beyond 2^$MAX_SHMAT"
		echo -e "$MSG_FAILED"
		EXIT_STATUS=1
	else
		echo "attached memory at 2^$alloc below or equal to 2^$MAX_SHMAT"
		echo -e "$MSG_PASSED"
	fi
fi


exit $EXIT_STATUS
